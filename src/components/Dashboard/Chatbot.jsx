import { useState, useEffect } from "react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faPaperPlane, faXmark } from "@fortawesome/free-solid-svg-icons";
import { GoogleGenerativeAI } from "@google/generative-ai";
import { database } from "../../../backend/firebase";
import { get, ref, set } from "firebase/database";
import loader from "../../assets/loading.gif";

const Chatbot = ({ setChatbotOpen, user }) => {
  const [userInput, setUserInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [chatHistory, setChatHistory] = useState([]);

  // Function to scroll chat history to the bottom
  const scrollToBottom = () => {
    const chatContainer = document.getElementById("chat-container");
    if (chatContainer) {
      chatContainer.scrollTop = chatContainer.scrollHeight;
    }
  };

  useEffect(() => {
    scrollToBottom(); // Scroll to bottom on initial render
  }, [chatHistory]);

  useEffect(() => {
    const userRef = ref(database, `users/${user.uid}/chatHistory`);
    const fetchChatHistory = async () => {
      const snapshot = await get(userRef);
      const data = snapshot.val();
      if (data) {
        setChatHistory(Object.values(data)); // Convert from object format to array
      } else {
        setChatHistory([]); // Empty chat history if no data
      }
    };

    fetchChatHistory();
  }, [user.uid]);

  const genAI = new GoogleGenerativeAI(process.env.REACT_APP_GENAI_KEY);

  const run = async () => {
    const model = genAI.getGenerativeModel({ model: "gemini-pro" });
    const prompt = `As an expert in food recommendations for India, please provide concise advice, make your answer small and summarize it in text message form, don't add any special characters: ${userInput}`;
    return await model.generateContent(prompt);
  };

  const addMessageToChatHistory = async (message) => {
    const userRef = ref(database, `users/${user.uid}/chatHistory`);
    const snapshot = await get(userRef); // Get current chat history
    let chatHistory = snapshot.val() || []; // Initialize chat history as array if it doesn't exist
    chatHistory.push(message); // Add new message to chat history array
    await set(userRef, chatHistory); // Set updated chat history back to Firebase
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    const userMessage = {
      user: true,
      text: userInput,
    };

    // Add user message to chat history
    await addMessageToChatHistory(userMessage);

    // Generate AI response
    const result = await run();
    const response = await result.response;
    // console.log(response);
    const aiMessage = {
      user: false,
      text: response.text(), // Use the response generated by the AI
    };

    // Add AI response to chat history
    await addMessageToChatHistory(aiMessage);

    // Update the chat history state with the new messages
    setChatHistory([...chatHistory, userMessage, aiMessage]);

    // Set the response in the component state
    // setResponse(response);
    setLoading(false);
    setUserInput("");
    scrollToBottom();
  };

  return (
    <div className="fixed bottom-5 md:bottom-10 z-20 p-7 shadow-md shadow-gray-500 border border-gray-400 rounded-xl right-5 md:right-10 h-[400px] w-[250px] sm:w-[300px] bg-gray-800 flex flex-col gap-5 text-[#E5E8EB]">
      <div
        className="absolute top-1 right-3 cursor-pointer"
        onClick={() => setChatbotOpen(false)}
      >
        <FontAwesomeIcon icon={faXmark} />
      </div>
      {loading ? (
        <div className="h-[90%]">
          <img src={loader} alt="" width={50} className="mx-auto" />
        </div>
      ) : (
        <div
          className="scrollbar-none flex flex-col gap-3 w-full pb-10 h-[90%] text-white overflow-scroll overflow-x-hidden"
          id="chat-container"
        >
          {chatHistory.length == 0 && (
            <div className="text-gray-400">Ask your queries here...</div>
          )}
          {chatHistory.map((message) => (
            <div
              key={message.text}
              className={`px-2 py-1 rounded-md font-medium text-black text-sm w-[80%] ${
                message.user ? "bg-slate-400" : "ml-auto bg-green-300"
              } `}
            >
              <span className="font-bold">{message.user ? "You:" : "AI:"}</span>{" "}
              {message.text}
            </div>
          ))}
        </div>
      )}

      <form>
        <div className="search w-full flex items-center gap-3 text-sm">
          <input
            type="text"
            value={userInput}
            onChange={(e) => setUserInput(e.target.value)}
            placeholder="Any query?"
            className="w-full bg-transparent outline-none border-[#E5E8EB] border-b pb-1"
          />
          <button
            className=" px-2 py-1.5 hover:bg-slate-900 rounded-full"
            onClick={(e) => handleSubmit(e)}
          >
            <FontAwesomeIcon icon={faPaperPlane} color="#E5E8EB" />
          </button>
        </div>
      </form>
    </div>
  );
};

export default Chatbot;
